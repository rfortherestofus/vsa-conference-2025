---
title: "VSA 2025 R Session"
author: "Brian Slattery & David Keyes"
format: 
  dashboard:
    scrolling: true
execute: 
  warning: false
  echo: false
  message: false
  output: true
---

```{r packages}
# These are all of the packages (collections of R functions) that are used to create this report
# These are separately installed with install.packages() & need to be enabled here using the library() function

# The tidyverse package (actually, a collection of packages) is a broad set of functions for organizing, analyzing, and visualizing data
# Tidyverse packages assume that your data is in a particular format-- but this allows them to work seamlessly together
# This will often provide the vast majority of additional capability that you'll need for any project
library(tidyverse)

# This allows you to smoothly authenticate with Google and download data from Google Sheets
library(googlesheets4)

# This provides a clean_names function that makes variables easier to work with from imported data
library(janitor)

# This has specialized functions for creating & manipulating tables for dataviz/reports
library(gt)

# This helps to deal with date & time data
library(lubridate)


```

```{r import}
# The first step is to import the survey responses from Google Sheets
# Here's the link to add new responses to the survey: https://forms.gle/1BRREmqWbVB6x8nm9

# Authenticating with Google is necessary before downloading data from Sheets
gs4_auth(Sys.getenv("GOOGLE_SHEETS_EMAIL"))

# This gets the responses from the Google Sheet, and saves it with the name "responses"
responses <- read_sheet(
  "https://docs.google.com/spreadsheets/d/1fL0_iM95kR2YU6om8ZE6yk_2ufp9W4RdR35gVxvi9Q8/"
)

# This cleans up the variable names that came in from Sheets, to make them easier to work with later
responses <- clean_names(responses)
```

## Row

### Column {width=50%}

```{r experience}
#| output: false

# First let's look at the question about previous experience with R

# I want to know how many people responded with each of the possible options
# So I group_by() the name of the column that I want to look at, and then count()
responses |>
  group_by(how_much_experience_do_you_have_with_r) |>
  count()

# Another way to do this is to use summarize() instead of count()
# Summarizing allows me to do other things besides counting, like getting the max, average, etc
# The n() function here, used inside sum(), gets me the number of responses
# And I can choose what the resulting column is called (in this case, "total")-- count() names it "n" by default
responses |>
  group_by(how_much_experience_do_you_have_with_r) |>
  summarize(total = sum(n()))

# However, the options for the experience question are listed in alphabetical order, what if I want to see them a different way?
# I can view them in descending order of number of responses, using arrange() and desc()
# (The ungroup() function is necessary if you do other steps after counting or summarizing)
responses |>
  group_by(how_much_experience_do_you_have_with_r) |>
  count() |>
  ungroup() |>
  arrange(desc(n))

# But my options are themselves meant to be in an order (none, slight, moderate, a lot)
# So I can format this variable into a "factor", which is a type of column that has ordering information (called "levels") saved in it
# To do this, I need to change my experience column with mutate()
# (I also first rename the column to a shorter name so it's easier to read)
responses |>
  rename(experience = how_much_experience_do_you_have_with_r) |>
  group_by(experience) |>
  count() |>
  ungroup() |>
  mutate(
    experience = fct(
      experience,
      levels = c(
        "None at all",
        "Slight experience",
        "Moderate experience",
        "A lot of experience"
      )
    )
  ) |>
  arrange(experience)

# You can also add a new column using mutate, that shows the percent of responses in each category
responses |>
  rename(experience = how_much_experience_do_you_have_with_r) |>
  group_by(experience) |>
  count() |>
  ungroup() |>
  mutate(percent = n / n()) |>
  mutate(
    experience = fct(
      experience,
      levels = c(
        "None at all",
        "Slight experience",
        "Moderate experience",
        "A lot of experience"
      )
    )
  ) |>
  arrange(experience)

```

```{r experience-table}
#| title: R Experience

# Building on the final example above, this is rendered into a table with gt()
# The names for the columns are adjusted with cols_label(), a function that's part of the gt package
# An additional step also formats the percent column to look more presentable, rather than a raw number
responses |>
  rename(experience = how_much_experience_do_you_have_with_r) |>
  group_by(experience) |>
  count() |>
  ungroup() |>
  mutate(percent = n / n()) |>
  mutate(
    experience = fct(
      experience,
      levels = c(
        "None at all",
        "Slight experience",
        "Moderate experience",
        "A lot of experience"
      )
    )
  ) |>
  arrange(experience) |>
  mutate(percent = scales::label_percent(1)(percent)) |>
  gt() |>
  cols_label(experience = "Level of R Experience", n = "#", percent = "%")

```


### Column {width=50%}

```{r dates}
#| output: false
# It's common to have to clean up date & time data when it's messy or nonstandard
# For example, Excel or Google Sheets can have a hard time taking a date in text format, and turning it into a usable "date" format
# R is very good at cleaning up messy date data-- here's the birthday data from the survey that is intentionally messed up a bit
responses |> 
  select(bad_birthday)

# The parse_date_time() function in the lubridate package can quickly transform text dates into a useable format
# Like above we add a new column by mutating an existing column, using bad_birthday to create good_birthday with parse_date_time() 
responses |> 
  select(bad_birthday) |> 
  mutate(good_birthday = parse_date_time(bad_birthday, orders = "mdy"))

# This allows us to do things like easily get the month from the date using month()
# Which can be used to highlight which months of the year have the most birthdays from our session attendees
# (This uses same grouping/counting steps as above)
responses |> 
  select(bad_birthday) |> 
  mutate(good_birthday = parse_date_time(bad_birthday, orders = "mdy")) |> 
  mutate(month = month(good_birthday, label = TRUE)) |> 
  group_by(month) |> 
  count() |> 
  arrange(desc(n))
```

```{r dates-chart}
#| title: Birthday Months
#| fig-height: 3
# Let's show these more frequent birthday months in a visual
# Continuing from the previous section, with some new steps to add in any months that might be missing (using a joining function)
# The bits after ggplot() are what create this particular visualization & style it visually
# (ggplot is very powerful but also very complex, and we aren't covering it in detail here-- but you can learn more from our linked resources!)
responses |> 
  select(bad_birthday) |> 
  mutate(good_birthday = parse_date_time(bad_birthday, orders = "mdy")) |> 
  mutate(month = month(good_birthday, label = TRUE)) |> 
  group_by(month) |> 
  count() |> 
  ungroup() |> 
  right_join(as_tibble(month.abb) |> rename(month = value)) |> 
  mutate(month = fct(month, levels = month.abb)) |> 
  mutate(n = case_when(is.na(n) ~ 0, .default = n)) |> 
  ggplot() +
  geom_tile(aes(x = month, y = 1, fill = n)) +
  theme_minimal() +
  theme(legend.position = "top",
        axis.title = element_blank(),
        axis.text.y = element_blank()) +
  scale_fill_gradient(low = "white",
                      high = "#007765")
```

## Row

```{r filtering}
#| output: false
# R is great for filtering data in all kinds of ways
# For example, let's filter out previous responses, so we can see how many new responses we've gotten
# Google Sheets adds a timestamp to every new response, so we can use that to compare
# R has a built-in function, today() that tells you what day it is
# So if the timestamp is greater than today() (since it starts at midnight), then the response came in today
responses |> 
  filter(timestamp > today())

# We'll use this to get the number of new, previous, and total responses, to show in highlighted boxes below
```

```{r new-resp}
#| content: valuebox
#| title: New responses
#| icon: pencil
#| color: "#6AA341"
responses |> 
  filter(timestamp > today()) |> 
  nrow()
```

```{r old-resp}
#| content: valuebox
#| title: Old responses
#| icon: clock
#| color: "#E4E192"
responses |> 
  filter(timestamp < today()) |> 
  nrow()
```

```{r total-resp}
#| content: valuebox
#| title: Total responses
#| icon: clipboard
#| color: "#007765"
responses |> 
  nrow()
```
